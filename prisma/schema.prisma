// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Configuration model for site settings
model Configuration {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configurations")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?  // Profile image URL (for OAuth)
  password  String?
  role      String   @default("customer")

  // Email verification
  emailVerified DateTime?
  emailVerificationToken String?

  // Password reset
  passwordResetToken String?
  passwordResetExpires DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (Phase 4)
  media     Media[]
  pages     Page[]
  reviews   Review[]
  profile   CustomerProfile?

  // NextAuth relations
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

// Audit log for tracking changes
model AuditLog {
  id        String   @id @default(cuid())
  action    String
  userId    String?
  metadata  String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// Media model for file uploads (Phase 4)
model Media {
  id           String   @id @default(cuid())
  filename     String   // Stored filename
  originalName String   // Original upload name
  mimeType     String   // image/jpeg, etc.
  size         Int      // File size in bytes
  path         String   // /uploads/2024/01/filename.jpg
  alt          String?  // Alt text for SEO
  title        String?  // Media title
  userId       String?  // Who uploaded (nullable for system uploads)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  pages        Page[]   @relation("PageFeaturedImage")
  
  @@index([userId])
  @@index([createdAt])
  @@map("media")
}

// Page model for static pages and homepage (Phase 4)
model Page {
  id               String    @id @default(cuid())
  title            String
  slug             String    @unique
  content          String    @db.Text // TipTap JSON content
  excerpt          String?   @db.Text
  status           String    @default("draft") // draft, published
  isHomepage       Boolean   @default(false)
  
  // SEO fields
  metaTitle        String?
  metaDescription  String?   @db.Text
  metaKeywords     String?
  canonicalUrl     String?
  
  // Open Graph
  ogTitle          String?
  ogDescription    String?   @db.Text
  ogImageId        String?
  
  // Twitter Card
  twitterTitle     String?
  twitterDescription String? @db.Text
  twitterImageId   String?
  
  // Featured image
  featuredImageId  String?
  
  // Author and timestamps
  authorId         String?
  publishedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  author           User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  featuredImage    Media?    @relation("PageFeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
  menuItems        MenuItem[]
  
  @@index([slug])
  @@index([status])
  @@index([authorId])
  @@index([publishedAt])
  @@map("pages")
}

// Site settings model (Phase 4)
model SiteSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text // JSON value
  type      String   @default("general") // general, appearance, seo, social
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@map("site_settings")
}

// Menu model for navigation (Phase 4)
model Menu {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  location  String     // header, footer, sidebar
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  items     MenuItem[]
  
  @@index([location])
  @@map("menus")
}

// Menu item model for menu entries (Phase 4)
model MenuItem {
  id        String     @id @default(cuid())
  menuId    String
  label     String
  url       String?    // For custom/external links
  type      String     @default("custom") // page, custom, external
  pageId    String?    // Link to Page if type is "page"
  target    String     @default("_self") // _self, _blank
  cssClass  String?    // Custom CSS classes
  
  // Hierarchy
  parentId  String?    // For nested menus
  order     Int        @default(0)
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  page      Page?      @relation(fields: [pageId], references: [id], onDelete: SetNull)
  parent    MenuItem?  @relation("MenuItemHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  MenuItem[] @relation("MenuItemHierarchy")
  
  @@index([menuId])
  @@index([pageId])
  @@index([parentId])
  @@index([order])
  @@map("menu_items")
}

// ============================================
// PHASE 5: PRODUCT MANAGEMENT MODELS
// ============================================

// Category model with hierarchy support (Phase 5)
model Category {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?     @db.Text
  image       String?     // Category image path
  
  // Hierarchy
  parentId    String?
  order       Int         @default(0)
  
  // SEO
  metaTitle       String?
  metaDescription String?  @db.Text
  
  // Status
  isActive    Boolean     @default(true)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[]  @relation("CategoryHierarchy")
  products    Product[]
  
  @@index([slug])
  @@index([parentId])
  @@index([order])
  @@index([isActive])
  @@map("categories")
}

// Product model (Phase 5)
model Product {
  id              String      @id @default(cuid())
  name            String
  slug            String      @unique
  sku             String?     @unique
  description     String?     @db.Text
  shortDescription String?    @db.Text
  
  // Categorization
  categoryId      String?
  
  // Pricing
  price           Float       // Base price (or price per kg if weightBasedPricing is true)
  compareAtPrice  Float?      // Original price (for showing discounts)
  costPerItem     Float?      // Cost to track profit
  weightBasedPricing Boolean  @default(false) // If true, price is per kg
  
  // Inventory (aggregate from variants or direct)
  trackInventory  Boolean     @default(true)
  stockQuantity   Int         @default(0)
  lowStockThreshold Int?
  
  // Product settings
  isFeatured      Boolean     @default(false)
  isActive        Boolean     @default(true)
  status          String      @default("draft") // draft, published, archived
  
  // Shipping
  weight          Float?      // in kg
  length          Float?      // in cm
  width           Float?      // in cm
  height          Float?      // in cm
  
  // SEO
  metaTitle       String?
  metaDescription String?     @db.Text
  metaKeywords    String?
  
  // Dates
  publishedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  category        Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  variants        ProductVariant[]
  images          ProductImage[]
  inventoryLogs   InventoryLog[]
  reviews         Review[]
  
  @@index([slug])
  @@index([sku])
  @@index([categoryId])
  @@index([status])
  @@index([isFeatured])
  @@index([isActive])
  @@index([publishedAt])
  @@map("products")
}

// Product variant model for variations (Phase 5)
model ProductVariant {
  id              String      @id @default(cuid())
  productId       String
  
  // Variant details
  name            String      // e.g., "Small / Red"
  sku             String?     @unique
  
  // Variant options (stored as JSON for flexibility)
  // e.g., {"size": "Small", "color": "Red"}
  options         String      @db.Text
  
  // Pricing (can override product price)
  price           Float?
  compareAtPrice  Float?
  costPerItem     Float?
  
  // Inventory
  stockQuantity   Int         @default(0)
  
  // Physical attributes
  weight          Float?
  length          Float?
  width           Float?
  height          Float?
  
  // Status
  isActive        Boolean     @default(true)
  
  // Image
  imageId         String?     // Primary image for this variant
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventoryLogs   InventoryLog[]
  
  @@index([productId])
  @@index([sku])
  @@index([isActive])
  @@map("product_variants")
}

// Product image model for multiple images (Phase 5)
model ProductImage {
  id          String      @id @default(cuid())
  productId   String
  mediaId     String?     // Link to Media table
  
  // Image details (if not using Media table)
  url         String      // Image URL or path
  alt         String?     // Alt text for SEO
  
  // Ordering
  order       Int         @default(0)
  isPrimary   Boolean     @default(false)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([order])
  @@index([isPrimary])
  @@map("product_images")
}

// Inventory log for tracking stock changes (Phase 5)
model InventoryLog {
  id              String      @id @default(cuid())
  productId       String?
  variantId       String?

  // Stock change
  type            String      // add, remove, set, sale, return, adjustment
  quantity        Int         // Positive for add, negative for remove
  previousStock   Int
  newStock        Int

  // Details
  reason          String?     // Reason for stock change
  reference       String?     // Order ID, PO number, etc.
  notes           String?     @db.Text

  // User tracking
  userId          String?

  createdAt       DateTime    @default(now())

  // Relations
  product         Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant         ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([variantId])
  @@index([type])
  @@index([createdAt])
  @@map("inventory_logs")
}

// ============================================
// PHASE 7: CUSTOMER FEATURES - REVIEWS & PROFILES
// ============================================

// Review model for product reviews and ratings
model Review {
  id                String      @id @default(cuid())
  productId         String
  userId            String?     // Nullable for guest reviews (future)

  // Review content
  rating            Int         // 1-5 stars
  title             String?
  comment           String      @db.Text

  // Status
  status            String      @default("pending") // pending, approved, rejected
  isVerifiedPurchase Boolean    @default(false)

  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  user              User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([userId])
  @@index([status])
  @@index([rating])
  @@index([createdAt])
  @@map("reviews")
}

// Customer profile model for additional user information
model CustomerProfile {
  id          String    @id @default(cuid())
  userId      String    @unique

  // Personal information
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  gender      String?   // male, female, other

  // Contact information (additional to User.email)
  phone       String?

  // Preferences
  newsletter  Boolean   @default(true)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  addresses   Address[]

  @@map("customer_profiles")
}

// Address model for customer addresses
model Address {
  id            String   @id @default(cuid())
  customerId    String

  // Address details
  type          String   @default("shipping") // shipping, billing
  isDefault     Boolean  @default(false)

  // Recipient information
  firstName     String
  lastName      String
  company       String?

  // Address fields
  streetAddress String
  apartment     String?
  city          String
  state         String
  postalCode    String
  country       String   @default("US")

  // Contact
  phone         String?

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer      CustomerProfile @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([type])
  @@index([isDefault])
  @@map("addresses")
}

// NextAuth.js models for OAuth support
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}