name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Push database schema
        run: npx prisma db push --accept-data-loss
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
      
      - name: Run TypeScript type check
        run: npm run type-check
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run tests
        run: npm run test -- --testPathIgnorePatterns="tests/lib/redis.test.ts"
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379
          APP_NAME: Test Store
          APP_URL: http://localhost:3000
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379
          APP_NAME: Test Store
          APP_URL: http://localhost:3000
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  build-status:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: always()
    
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.quality-checks.result }}" == "success" ]; then
            echo "✅ All quality checks passed!"
            exit 0
          else
            echo "❌ Quality checks failed"
            exit 1
          fi